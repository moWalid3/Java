

public mergeSort(){
    int []  workspace = new int[size];
    recMergeSort(workspace,0,size-1);
}
public void recMergeSort(int []workspace,int lowerBound,int upperBound){

    if (lowerBound == upperBound ) return ;
    else{
    
        int mid = (lowerBound + upperBound)/2;
        
        recMergesort(workspace, lowerBound , mid);
        recMergesort(workspace,mid + 1, upperbound );
        
        merge(workspace, lowerBound, mid+1, upperbound);
    }
}
public void merge(int []workspace,int lowPtr,int highPtr, int upperbound){
    int lowerBound = lowPtr;
    int mid = highPtr - 1;
    int j=0;
    int n= upperbound - lowerBound +1;

    while(lowPtr <= mid && highPtr <= upperbound)
        if(arr[lowPtr] > arr[highPtr])
            workspace[j++] = arr[highPtr++]
        else
            workspace[j++] = arr[lowPtr++]
    
    while(lowPtr <= mid)
        workspace [j++] = arr[lowPtr++];

    while(highPtr <= upperbound)    
        workspace [j++] = arr[highPtr ++];
        
    for(int i=0;i<n;i++)
        arr[lowerBound+i] = workspace[i];
        
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        